stages:
  - prepare
  - build_and_test
  - deploy

variables:
  BUILD_NAME: Safari
  IMAGE: unityci/editor
  IMAGE_VERSION: 3
  UNITY_DIR: $CI_PROJECT_DIR
  VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-main"'
    - if: '$CI_COMMIT_BRANCH == "ci"'

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true

.unity_after_script: &unity_after_script
  after_script:
    - chmod +x ./ci/return_license.sh && ./ci/return_license.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/
      - $UNITY_DIR/../unity-builder

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null || $UNITY_SERIAL != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license
    - *unity_after_script

.test: &test
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    when: always
    expire_in: 2 weeks
  tags:
    - gitlab-org
  coverage: /<Linecoverage>(.*?)</Linecoverage>/
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-main"'
    - if: '$CI_COMMIT_BRANCH == "ci"'

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: NUNIT

test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: NUNIT

.test-with-junit-reports: &test-with-junit-reports
  stage: build_and_test
  <<: *unity_defaults
  script:
    - apt-get update && apt-get install -y default-jre libsaxonb-java
    - chmod +x ./ci/test.sh && ./ci/test.sh
    - saxonb-xslt -s $UNITY_DIR/$TEST_PLATFORM-results.xml -xsl $CI_PROJECT_DIR/ci/nunit-transforms/nunit3-junit.xslt >$UNITY_DIR/$TEST_PLATFORM-junit-results.xml
  artifacts:
    when: always
    paths:
      - $UNITY_DIR/$TEST_PLATFORM-coverage/
    reports:
      junit:
        - $UNITY_DIR/$TEST_PLATFORM-junit-results.xml
        - "$UNITY_DIR/$TEST_PLATFORM-coverage/coverage.xml"
    expire_in: 2 weeks
  tags:
    - gitlab-org
  coverage: /<Linecoverage>(.*?)</Linecoverage>/
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-main"'
    - if: '$CI_COMMIT_BRANCH == "ci"'

test-playmode-with-junit-reports:
  <<: *test-with-junit-reports
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT

test-editmode-with-junit-reports:
  <<: *test-with-junit-reports
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: JUNIT

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  tags:
    - gitlab-org
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-main"'
    - if: '$CI_COMMIT_BRANCH == "ci"'

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64

build-StandaloneOSX:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneOSX

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64


# build-WebGL:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
#   before_script:
#     - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
#     - apt-get update && apt-get install ffmpeg -y
#   variables:
#     BUILD_TARGET: WebGL

# build-android:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: Android
#     BUILD_APP_BUNDLE: "false"

# build-android-il2cpp:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: Android
#     BUILD_APP_BUNDLE: "false"
#     SCRIPTING_BACKEND: IL2CPP

# build-ios-xcode:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: iOS

# deploy-android:
#   stage: deploy
#   image: ruby
#   script:
#     - cd $UNITY_DIR/Builds/Android
#     - echo $GPC_TOKEN > gpc_token.json
#     - gem install bundler
#     - bundle install
#     - fastlane supply --aab "${BUILD_NAME}.aab" --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#   needs: ["build-android"]

# build-and-deploy-ios:
#   stage: deploy
#   script:
#     - cd $UNITY_DIR/Builds/iOS/$BUILD_NAME
#     - pod install
#     - fastlane ios beta
#   tags:
#     - ios
#     - mac
#   needs: ["build-ios-xcode"]

# pages:
#   image: alpine:latest
#   stage: deploy
#   script:
#     - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
#   artifacts:
#     paths:
#       - public
#   only:
#     - dev-main

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-main"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "ci"'
      when: always
    - when: never
